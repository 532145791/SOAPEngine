{"name":"SOAPEngine","tagline":"This generic SOAP client allows you to access web services using a your iOS and Mac OS X app.","body":"**SOAPEngine**\r\n================\r\n\r\nThis generic `SOAP` client allows you to access web services using a your `iOS` app and `Mac OS X` app.\r\n\r\nWith this Framework you can create iPhone, iPad and Mac OS X apps that supports SOAP Client Protocol. This framework able executes methods at remote web services with SOAP standard protocol.\r\n\r\n## Features\r\n* Support both 2001 (v1.1) and 2003 (v1.2) `XML` schema.\r\n* Support array, array of structs and dictionary.\r\n* Support user-defined object. Capable of serializing complex data types and array of complex data types, even multi-level embedded structs.\r\n* Supports `ASMX` Services, `WCF` Services (`svc`) and now also the `WSDL` definitions.\r\n* Supports Basic Authentication, `WS-Security`, Client side Certificate and custom security header.\r\n* `AES256` or `3DES` Encrypt/Decrypt data without SSL security.\r\n* An example of service and how to use it is included in source code.\r\n\r\n## Requirements for iOS\r\n* iOS 5.1.1, and later\r\n* `XCode` 5.0 or later\r\n* Security.framework\r\n* Foundation.framework\r\n* UIKit.framework\r\n* libxml2.dylib\r\n\r\n## Requirements for Mac OS X\r\n* OS X 10.9 and later\r\n* `XCode` 5.0 or later\r\n* Security.framework\r\n* Foundation.framework\r\n* AppKit.framework\r\n* Cocoa.framework\r\n* libxml2.dylib\r\n\r\n## Limitations\r\n* for `WCF` services, only supports basic http bindings (`<basicHttpBinding>`).\r\n* in `Mac OS X` unsupported image objects (instead you can use the `NSData`).\r\n\r\n## How to use\r\n\r\nwith delegates :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\r\n\t// standard soap service (.asmx)\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\tsoap.userAgent = @\"SOAPEngine\";\r\n\tsoap.delegate = self; // use SOAPEngineDelegate\r\n\r\n\t// each single value\r\n\t[soap setValue:@\"my-value1\" forKey:@\"Param1\"];\r\n\t[soap setIntegerValue:1234 forKey:@\"Param2\"];\r\n\t// service url without ?WSDL, and you can search the soapAction in the WSDL\r\n\t[soap requestURL:@\"http://www.my-web.com/my-service.asmx\" \r\n\t\t  soapAction:@\"http://www.my-web.com/My-Method-name\"];\r\n \r\n\t#pragma mark - SOAPEngine Delegates\r\n\r\n\t- (void)soapEngine:(SOAPEngine *)soapEngine didFinishLoading:(NSString *)stringXML {\r\n\r\n\t        NSDictionary *result = [soapEngine dictionaryValue];\r\n        \t// read data from a dataset table\r\n        \tNSArray *list = [result valueForKeyPath:@\"NewDataSet.Table\"];\r\n\t}\r\n```\r\n\r\nwith block programming :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\t\r\n\t// TODO: your user object\r\n\tMyClass myObject = [[MyClass alloc] init];\r\n\t\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\tsoap.userAgent = @\"SOAPEngine\";\r\n\tsoap.version = VERSION_WCF_1_1; // WCF service (.svc)\r\n\t\r\n\t// service url without ?WSDL, and you can search the soapAction in the WSDL\r\n\t[soap requestURL:@\"http://www.my-web.com/my-service.svc\"\r\n\t\t  soapAction:@\"http://www.my-web.com/my-interface/my-method\"\r\n\t\t\t   value:myObject\r\n\t\t\tcomplete:^(NSInteger statusCode, NSString *stringXML) {\r\n\t\t    \tNSDictionary *result = [soap dictionaryValue];\r\n\t\t\t\tNSLog(@\"%@\", result);\r\n\t\t\t} failWithError:^(NSError *error) {\r\n\t\t\t\tNSLog(@\"%@\", error);\r\n\t\t\t}];\r\n```\t\r\n\r\ndirectly from WSDL (not recommended is slow) :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\t\r\n\t// TODO: your user object\r\n\tMyClass myObject = [[MyClass alloc] init];\r\n\t\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\tsoap.userAgent = @\"SOAPEngine\";\r\n\t\r\n\t// service url with WSDL, and operation (method name) without tempuri\r\n\t[soap requestWSDL:@\"http://www.my-web.com/my-service.amsx?wsdl\"\r\n\t\t    operation:@\"my-method-name\"\r\n\t\t\t    value:myObject\r\n\t\t\tcompleteWithDictionary:^(NSInteger statusCode, NSDictionary *dict) {\r\n\r\n              NSLog(@\"Result: %@\", dict);\r\n\r\n\t\t\t} failWithError:^(NSError *error) {\r\n\r\n\t\t\t\tNSLog(@\"%@\", error);\r\n\t\t\t}];\r\n```\t\r\n\r\nwith notifications :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\r\n\t// TODO: your user object\r\n\tMyClass myObject = [[MyClass alloc] init];\r\n\t\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\tsoap.userAgent = @\"SOAPEngine\";\r\n\tsoap.version = VERSION_WCF_1_1; // WCF service (.svc)\r\n\t\t\r\n    [[NSNotificationCenter defaultCenter] \r\n    \t\t\taddObserver:self \r\n    \t\t\t   selector:@selector(soapEngineDidFinishLoading:) \r\n    \t\t\t\t   name:SOAPEngineDidFinishLoadingNotification \r\n    \t\t\t\t object:nil];\r\n\t\r\n\t// service url without ?WSDL, and you can search the soapAction in the WSDL\r\n\t[soap requestURL:@\"http://www.my-web.com/my-service.svc\" \r\n\t\t  soapAction:@\"http://www.my-web.com/my-interface/my-method\"\r\n\t\t  \t   value:myObject];\r\n\t\r\n\t#pragma mark - SOAPEngine Notifications\r\n\t\r\n\t- (void)soapEngineDidFinishLoading:(NSNotification*)notification\r\n\t{\r\n    \tSOAPEngine *engine = notification.object; // SOAPEngine object\r\n    \tNSDictionary *result = [engine dictionaryValue];\r\n    \tNSLog(@\"%@\", result);\r\n\t}\r\n```\r\n\r\nSynchronous request :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\t\r\n\tNSError *error = nil;\r\n    SOAPEngine *soap = [[SOAPEngine alloc] init];\r\n    soap.responseHeader = YES; // use only for non standard MS-SOAP service like PHP\r\n    NSDictionary *dict = [soap syncRequestURL:@\"http://www.my-web.com/my-service.amsx\" \r\n    \t\t\t\t\t\tsoapAction:@\"http://tempuri.org/my-method\" error:&error];\r\n    NSLog(@\"error: %@, result: %@\", error, dict)\r\n```\r\n\r\nSwift language :\r\n\r\n``` swift\r\n        var soap = SOAPEngine()\r\n        soap.userAgent = \"SOAPEngine\"\r\n        soap.actionNamespaceSlash = true\r\n        soap.version = VERSION_1_1\r\n        soap.responseHeader = true // use only for non standard MS-SOAP service\r\n        \r\n        soap.setValue(\"param-value\", forKey: \"param-name\")\r\n        soap.requestURL(\"http://www.my-web.com/my-service.asmx\",\r\n            soapAction: \"http://www.my-web.com/My-Method-name\",\r\n            completeWithDictionary: { (statusCode : Int, \r\n            \t\t\t\t\t dict : [NSObject : AnyObject]!) -> Void in\r\n                \r\n                var result:Dictionary = dict as Dictionary\r\n                NSLog(\"%@\", result)\r\n                \r\n            }) { (error : NSError!) -> Void in\r\n                \r\n                NSLog(\"%@\", error)\r\n        }\r\n```\r\n\t\r\nsettings for soap authentication :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\tsoap.userAgent = @\"SOAPEngine\";\r\n\t\r\n\t// authorization\r\n\tsoap.authorizationMethod = SOAP_AUTH_BASIC; // basic auth\r\n\tsoap.username = @\"my-username\";\r\n\tsoap.password = @\"my-password\";\r\n\t\r\n\t// TODO: your code here...\r\n\t\r\n```\t\r\n\r\nencryption/decryption data without SSL/HTTPS :\r\n\r\n``` objective-c\r\n\t#import <SOAPEngine/SOAPEngine.h>\r\n\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\tsoap.userAgent = @\"SOAPEngine\";\r\n\tsoap.encryptionType = SOAP_ENCRYPT_AES256; // or SOAP_ENCRYPT_3DES\r\n\tsoap.encryptionPassword = @\"my-password\";\r\n\r\n\t// TODO: your code here...\r\n\t\r\n```\t\r\nW3Schools example :\r\n\r\n``` objective-c\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n    soap.actionNamespaceSlash = YES;\r\n\r\n    // w3schools Celsius to Fahrenheit\r\n    [soap setValue:@\"30\" forKey:@\"Celsius\"];\r\n    [soap requestURL:@\"http://www.w3schools.com/webservices/tempconvert.asmx\"  \r\n        soapAction:@\"http://www.w3schools.com/webservices/CelsiusToFahrenheit\" \r\n        complete:^(NSInteger statusCode, NSString *stringXML) {\r\n\r\n        NSLog(@\"Result: %f\", [soap floatValue]);\r\n\r\n    } failWithError:^(NSError *error) {\r\n\r\n        NSLog(@\"%@\", error);\r\n    }];\r\n\t\r\n```\t\r\n\r\nWebServiceX example :\r\n\r\n``` objective-c\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n    soap.actionNamespaceSlash = NO;\r\n\r\n    [soap setValue:@\"Roma\" forKey:@\"CityName\"];\r\n    [soap setValue:@\"Italy\" forKey:@\"CountryName\"];\r\n    [soap requestURL:@\"http://www.webservicex.com/globalweather.asmx\"\r\n          soapAction:@\"http://www.webserviceX.NET/GetWeather\"\r\n          completeWithDictionary:^(NSInteger statusCode, NSDictionary *dict) {\r\n              \r\n              NSLog(@\"Result: %@\", dict);\r\n              \r\n          } failWithError:^(NSError *error) {\r\n    \r\n              NSLog(@\"%@\", error);\r\n          }];\r\n          \t\r\n```\t\r\n\r\nPAYPAL example :\r\n\r\n``` objective-c\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\r\n    // PAYPAL associates a set of API credentials with a specific PayPal account\r\n    // you can generate credentials from this https://developer.paypal.com/docs/classic/api/apiCredentials/\r\n    // and convert to a p12 from terminal use :\r\n    // openssl pkcs12 -export -in cert_key_pem.txt -inkey cert_key_pem.txt -out paypal_cert.p12\r\n    soap.authorizationMethod = SOAP_AUTH_PAYPAL;\r\n    soap.username = @\"support_api1.your-username\";\r\n    soap.password = @\"your-api-password\";\r\n    soap.clientCerficateName = @\"paypal_cert.p12\";\r\n    soap.clientCertificatePassword = @\"certificate-password\";\r\n    soap.responseHeader = YES;\r\n    // use paypal for urn:ebay:api:PayPalAPI namespace\r\n    [soap setValue:@\"0\" forKey:@\"paypal:ReturnAllCurrencies\"];\r\n    // use paypal1 for urn:ebay:apis:eBLBaseComponents namespace\r\n    [soap setValue:@\"119.0\" forKey:@\"paypal1:Version\"]; // ns:Version in WSDL file\r\n    // certificate : https://api.paypal.com/2.0/ sandbox https://api.sandbox.paypal.com/2.0/\r\n    // signature : https://api-3t.paypal.com/2.0/ sandbox https://api-3t.sandbox.paypal.com/2.0/\r\n    [soap requestURL:@\"https://api.paypal.com/2.0/\"\r\n          soapAction:@\"GetBalance\" completeWithDictionary:^(NSInteger statusCode, NSDictionary *dict) {\r\n          \r\n        NSLog(@\"Result: %@\", dict);\r\n        \r\n    } failWithError:^(NSError *error) {\r\n    \r\n        NSLog(@\"%@\", error);\r\n    }];\r\n          \t\r\n```\t\r\n\r\nUpload file :\r\n\r\n``` objective-c\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\r\n\t// read local file\r\n    NSData *data = [NSData dataWithContentsOfFile:@\"my_video.mp4\"];\r\n\r\n\t// send file data\r\n    [soap setValue:data forKey:@\"video\"];\r\n    [soap requestURL:@\"http://www.my-web.com/my-service.asmx\"\r\n          soapAction:@\"http://www.my-web.com/UploadFile\"\r\n          completeWithDictionary:^(NSInteger statusCode, NSDictionary *dict) {\r\n              \r\n              NSLog(@\"Result: %@\", dict);\r\n              \r\n          } failWithError:^(NSError *error) {\r\n    \r\n              NSLog(@\"%@\", error);\r\n          }];\r\n          \t\r\n```\t\r\n\r\nDownload file :\r\n\r\n``` objective-c\r\n\tSOAPEngine *soap = [[SOAPEngine alloc] init];\r\n\r\n\t// send filename to remote webservice\r\n    [soap setValue:\"my_video.mp4\" forKey:@\"filename\"];\r\n    [soap requestURL:@\"http://www.my-web.com/my-service.asmx\"\r\n          soapAction:@\"http://www.my-web.com/DownloadFile\"\r\n          completeWithDictionary:^(NSInteger statusCode, NSDictionary *dict) {\r\n            \r\n            // local writable directory\r\n\t\t\tNSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\r\n\t\t\tNSString *filePath = [[paths firstObject] stringByAppendingPathComponent:@\"my_video.mp4\"];\r\n\r\n\t\t\t// the service returns file data in the tag named video\r\n\t\t\tNSData *data = dict[@\"video\"];\r\n\t\t    [data writeToFile:@\"my_video.mp4\" atomically:YES];\r\n              \r\n          } failWithError:^(NSError *error) {\r\n    \r\n              NSLog(@\"%@\", error);\r\n          }];\r\n          \t\r\n```\t\r\n\r\n## Optimizations\r\nWhen using the method named requestWSDL three steps are performed : \r\n\r\n1. retrieve the WSDL with an http request.\r\n2. processing to identify the soapAction.\r\n3. calls the method with an http request.\r\n\r\nthis is not optimized, very slow, instead you can use the optimization below : \r\n\r\n1. retrieving manually the SOAPAction directly from WSDL (once with your favorite browser).\r\n2. use the method named requestURL instead of requestWSDL.\r\n\r\n## Install in your apps\r\n\r\n1. add -lxml2 in Build Settings --> Other Linker Flags.\r\n![Other Linker Flags](https://raw.githubusercontent.com/priore/SOAPEngine/master/screen/otherlinkerflags.png)\r\n\r\n2. add /usr/include/libxml2 in Build Settings --> Header Search Paths.\r\n![Header Search Paths](https://raw.githubusercontent.com/priore/SOAPEngine/master/screen/headersearchpaths.png)\r\n\r\n3. SOAPEngine64.framework (for iOS apps) or SOAPEngineOSX.framework (for Mac OS X apps).\r\n4. add Security.framework.\r\n5. add AppKit.framework (only for Mac OS X apps, not required for iOS apps).\r\n![Frameworks](https://raw.githubusercontent.com/priore/SOAPEngine/master/screen/frameworks.png)\r\n\r\n6. in your class, use #import <SOAPEngine/SOAPEngine.h> (both iOS or Mac OS X apps).\r\n![import](https://raw.githubusercontent.com/priore/SOAPEngine/master/screen/codeimport.png)\r\n\r\n**[GET IT NOW!](http://www.prioregroup.com/iphone/soapengine.aspx)**\r\n\r\n##Contacts\r\n\r\n- https://twitter.com/DaniloPriore\r\n- https://www.facebook.com/prioregroup\r\n- http://www.prioregroup.com/\r\n- http://it.linkedin.com/in/priore/","google":"UA-11009971-11","note":"Don't delete this file! It's used internally to help with page regeneration."}